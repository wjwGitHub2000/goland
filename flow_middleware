package middleware

import (
	"github.com/juju/ratelimit"
	"github.com/zeromicro/go-zero/rest/httpx"
	"log"
	"net/http"
	"week3zc/api/internal/types"
)

type AuthTokenMiddleware struct {
	// 在中间件结构体中存储限流器
	limiter *ratelimit.Bucket
}

// NewAuthTokenMiddleware 初始化中间件，并创建限流器
func NewAuthTokenMiddleware() *AuthTokenMiddleware {
	// 创建一个限流器，每秒100个令牌
	bucket := ratelimit.NewBucketWithRate(100, 100)
	return &AuthTokenMiddleware{
		limiter: bucket,
	}
}

func (m *AuthTokenMiddleware) Handle(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		//检查是否可以从限流器中获取一个令牌
		if m.limiter.TakeAvailable(1) <= 0 {
			// 如果没有可用的令牌，返回429错误
			httpx.OkJsonCtx(r.Context(), w, &types.Response{
				Code:    http.StatusTooManyRequests,
				Message: "超过访问次数限制",
				Data:    nil,
			})
			log.Println("超过访问次数限制")
			return
		}
		// 如果获取到令牌，继续执行下一个中间件或处理器
		next(w, r)
	}
}
